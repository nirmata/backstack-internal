registry: "ghcr.io"
name: backstack-porter
description: "The BACK Stack hub cluster installation"

dockerfile: template.Dockerfile

credentials:
  - name: github-token
    env: GITHUB_TOKEN
    applyTo:
      - install
  - name: vault-token
    env: VAULT_TOKEN
    applyTo:
      - install
  - name: azure-credentials
    required: false
    env: AZURE_CREDENTIALS
    applyTo:
      - install
  - name: aws-credentials
    required: false
    env: AWS_CREDENTIALS
    applyTo:
      - install
  - name: kubeconfig
    path: /home/nonroot/.kube/config
    required: false
    applyTo:
      - install
  # optional Google auth for Backstage
  - name: backstage-google-auth-client-id
    required: false
    env: ${BACKSTAGE_GOOGLE_AUTH_CLIENT_ID}
    applyTo:
      - install
  - name: backstage-google-auth-client-secret
    required: false
    env: ${BACKSTAGE_GOOGLE_AUTH_CLIENT_SECRET}
    applyTo:
      - install
  # optional Google auth for Argo
  - name: argocd-google-auth-client-id
    required: false
    env: ${ARGOCD_GOOGLE_AUTH_CLIENT_ID}
    applyTo:
      - install
  - name: argocd-google-auth-client-secret
    required: false
    env: ${ARGOCD_GOOGLE_AUTH_CLIENT_SECRET}
    applyTo:
      - install
  # Since these annotations can contain potentially sensitive information such as
  # Account numbers, certificate numbers, etc. It is better they are passed in as
  # a credential rather than as a parameter
  - name: ingress-controller-annotations
    required: false
    path: /home/nonroot/ingress-nginx-custom.yaml
    applyTo:
      - install

parameters:
  - name: cluster-type
    env: CLUSTER_TYPE
    type: string
    default: kind
    enum:
      - kind
      - eks
      - aks
      - gke
  - name: repository
    env: REPOSITORY
    type: string
    default: https://github.com/nirmata/backstack-internal
  - name: backstage-host
    env: BACKSTAGE_HOST
    type: string
    default: backstage-7f000001.nip.io
  - name: argocd-host
    env: ARGOCD_HOST
    type: string
    default: argocd-7f000001.nip.io
  - name: vault-host
    env: VAULT_HOST
    type: string
    default: vault-7f000001.nip.io
  - name: argo-google-auth
    env: ARGO_GOOGLE_AUTH
    type: string
    default: false
  - name: backstage-google-auth
    env: BACKSTAGE_GOOGLE_AUTH
    type: string
    default: false
  - name: deploy-ingress-controller
    env: DEPLOY_INGRESS_CONTROLLER
    type: string
    default: true
  # This would be a link to manifest repo
  - name: kyverno-custom-policies-repo
    env: KYVERNO_CUSTOM_POLICIES
    type: string
    default: no_custom_policies

outputs:
  - name: kubeconfig
    type: file
    path: /home/nonroot/.kube/config
    applyTo:
      - install
  - name: kubeconfig-external
    type: file
    path: /home/nonroot/.kube/config-external
    applyTo:
      - install
  - name: ingress
    type: string
    applyTo:
      - install
  - name: argo-initial-passwd
    type: file
    path: /home/nonroot/argo_initial_passwd
    applyTo:
      - install

mixins:
  - exec
  - docker
  - kubernetes
  - helm3:
      clientVersion: v3.13.2
      repositories:
        crossplane-stable:
          url: https://charts.crossplane.io/stable
        ingress-nginx:
          url: https://kubernetes.github.io/ingress-nginx
        argocd:
          url: https://argoproj.github.io/argo-helm
        kyverno:
          url: https://kyverno.github.io/kyverno/
        cert-manager:
          url: https://charts.jetstack.io
        backstage:
          url: https://backstage.github.io/charts
        vault:
          url: https://helm.releases.hashicorp.com

# Define the steps that should execute when the bundle is installed
install:
  - exec:
      description: "Ensure Kubernetes Connection"
      command: ./helpers.sh
      arguments:
        - ensure_kubernetes
  - helm3:
      description: "Install Kyverno"
      name: kyverno
      namespace: kyverno
      chart: kyverno/kyverno
      atomic: true
      wait: true
  - helm3:
      description: "Install Kyverno PSS Restricted in Enforce Mode"
      name: kyverno-policies
      namespace: kyverno
      chart: kyverno/kyverno-policies
      atomic: true
      wait: true
      set:
        podSecurityStandard: restricted
        validationFailureAction: Enforce
        podSecuritySeverity: High
  - helm3:
      description: "Install cert-manager"
      name: cert-manager
      namespace: cert-manager
      chart: jetstack/cert-manager
      atomic: true
      wait: true
      set:
        installCRDs: true
  - kubernetes:
      description: "Create cert-manager Self-Signed ClusterIssuer"
      manifests:
        - ./manifests/cert-manager/cert-manager-cluster-issuer.yaml
  - helm3:
      description: "Install ingress-nginx"
      name: ingress-nginx
      namespace: ingress-nginx
      chart: ingress-nginx/ingress-nginx
      atomic: true
      wait: true
      values:
        - ./manifests/ingress-nginx/values-${bundle.parameters.cluster-type}.yaml
        - ${bundle.credentials.ingress-controller-annotations}
      outputs:
        - name: ingress
          resourceType: service
          resourceName: ingress-nginx-controller
          namespace: ingress-nginx
          jsonPath: "{.status.loadBalancer.ingress}"
  - helm3:
      description: "Install Crossplane"
      name: crossplane
      namespace: crossplane-system
      chart: crossplane-stable/crossplane
      atomic: true
      wait: true
      set:
        args: "{--enable-external-secret-stores}"
  - helm3:
      description: "Install Crossplane Vault ESS plugin"
      name: ess-plugin-vault
      namespace: crossplane-system
      chart: oci://xpkg.upbound.io/crossplane-contrib/ess-plugin-vault
      atomic: true
      wait: true
      values:
        - ./manifests/ess-plugin-vault.yaml
  - helm3:
      description: "Install Vault"
      name: vault
      namespace: vault
      chart: hashi/vault
      atomic: true
      wait: true
      values:
        - ./manifests/vault/vault-values.yaml
  - kubernetes:
      description: "Create Vault Crossplane ESS Configmap"
      manifests:
        - ./manifests/vault/vault-ess-configmap.yaml
  - kubernetes:
      description: "Create Crossplane VaultConfig"
      manifests:
        - ./manifests/vault/vault-corssplane-vault.yaml
  - kubernetes:
      description: "Create Crossplane StoreConfig"
      manifests:
        - ./manifests/vault/vault-corssplane-store.yaml
  - helm3:
      description: "Install Backstage"
      name: backstage
      namespace: backstage
      chart: backstage/backstage
      atomic: true
      wait: true
      values:
        - ./manifests/backstage/backstage-values.yaml
  - kubernetes:
      description: "Create Backstage App-Config ConfigMap"
      manifests:
        - ./manifests/backstage/backstage-app-config.yaml
  - kubernetes:
      description: "Create Backstage ClusterRole"
      manifests:
        - ./manifests/backstage/backstage-clusterrole.yaml
  - kubernetes:
      description: "Create Backstage ClusterRoleBinding"
      manifests:
        - ./manifests/backstage/backstage-clusterrole-binding.yaml
  - helm3:
      description: "Install ArgoCD"
      name: argocd
      namespace: argocd
      chart: argocd/argo-cd
      atomic: true
      wait: true
      values:
        - ./manifests/argocd/argocd-values.yaml
  # step argo-kyverno-custom-policies
  # step kyverno-custom-policies

  # - kubernetes:
  #     description: "Define Crossplane RuntimeConfig"
  #     manifests:
  #       - ./manifests/providers/runtime-config.yaml
  # - kubernetes:
  #     description: "Define Crossplane Providers"
  #     manifests:
  #       - ./manifests/providers/providers.yaml
  # - exec:
  #     description: "Wait for providers to become healthy"
  #     command: ./helpers.sh
  #     arguments:
  #       - validate_providers
  # - kubernetes:
  #     description: "Configure Crossplane Providers"
  #     manifests:
  #       - ./manifests/providers/provider-configs.yaml
  # - kubernetes:
  #     description: "Install BACK Stack Configuration"
  #     manifests:
  #       - ./manifests/back-stack.yaml
  # - exec:
  #     description: "Validate BACK Stack Configuration"
  #     command: ./helpers.sh
  #     arguments:
  #       - validate_configuration
  # - exec:
  #     description: "Deploy BACK Stack"
  #     command: ./helpers.sh
  #     arguments:
  #       - deploy_backstack_hub
  # - exec:
  #     description: "Install Secrets"
  #     command: ./helpers.sh
  #     arguments:
  #       - deploy_secrets
  # - exec:
  #     description: "Restart Crossplane ESS Vault Plugin"
  #     command: ./helpers.sh
  #     arguments:
  #       - restart_pod
  #       - crossplane-system
  #       - ess-plugin-vault
  # - exec:
  #     description: "Grab ArgoCD Initial Password"
  #     command: ./helpers.sh
  #     arguments:
  #       - return_argo_initial_pass

# Define the steps that should execute when the bundle is upgraded
upgrade:
  - exec:
      description: "Not implemented at this time"
      command: ./helpers.sh
      arguments:
        - upgrade

# Define the steps that should execute when the bundle is uninstalled
uninstall:
  - exec:
      description: "Uninstall BACK Stack"
      command: ./helpers.sh
      arguments:
        - uninstall
