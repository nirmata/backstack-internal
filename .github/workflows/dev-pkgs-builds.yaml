name: Build PKGs from branches for testing

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'The branch to use when building these packages'
        required: true
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  #TODO: need this to be macro
  CROSSPLANE_VERSION: v1.14.4
  PORTER_VERSION: v1.0.16
  PORTER_MIXIN_DOCKER_VERSION: v1.0.2
  PORTER_MIXIN_KUBERNETES_VERSION: v1.0.3
  PORTER_MIXIN_HELM_VERSION: v1.0.1
  PORTER_MIXIN_HELM_URL: https://mchorfa.github.io/porter-helm3/atom.xml

jobs:
  porter:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_name }}
          fetch-depth: 0

      - name: Set tag
        run: echo "VERSION_TAG=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        id: tag

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install porter
        run: |
          curl -L https://cdn.porter.sh/$PORTER_VERSION/install-linux.sh | bash
          echo "/home/runner/.porter" >> $GITHUB_PATH

      - name: Install porter mixins
        run: |
          porter mixin install docker --version $PORTER_MIXIN_DOCKER_VERSION && porter mixin install kubernetes --version $PORTER_MIXIN_KUBERNETES_VERSION && porter mixin install helm3 --feed-url $PORTER_MIXIN_HELM_URL --version $PORTER_MIXIN_HELM_VERSION

      - name: Lint the bundle
        run: |
          porter bundle lint -f porter/porter.yaml

      - name: Build Porter bundle
        run: |
          porter build --dir porter --name ${{ env.IMAGE_NAME }}-porter-unstable --version ${{vars.BACK_STACK_VERSION}}+${{ steps.tag.outputs.VERSION_TAG }}

      - name: Push ${{ steps.tag.outputs.VERSION_TAG }} & latest
        run: |
          porter publish --dir porter
          porter publish --dir porter --tag latest --force

  crossplane:
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_name }}
          fetch-depth: 0

      - name: Fetch Package Tag
        run: echo "VERSION_TAG=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        id: tag

      - name: Log into ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install crossplane CLI
        run: |
          curl -Lo /usr/local/bin/crossplane "https://releases.crossplane.io/stable/${{ env.CROSSPLANE_VERSION }}/bin/linux_amd64/crank" \
          && chmod +x /usr/local/bin/crossplane

      - name: Build Configuration Package
        run: |
          crossplane xpkg build --package-root=crossplane/ -o crossplane/backstack.xpkg

      - name: Push ${{ steps.tag.outputs.VERSION_TAG }} & latest
        run: |
          crossplane xpkg push -f crossplane/backstack.xpkg ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-crossplane-unstable:${{vars.BACK_STACK_VERSION}}_${{ steps.tag.outputs.VERSION_TAG }}
          crossplane xpkg push -f crossplane/backstack.xpkg ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-crossplane-unstable:latest

  backstage:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch_name }}
          fetch-depth: 0

      - name: Set tag
        run: echo "VERSION_TAG=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        id: tag

      - name: Set Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run yarn install
        uses: borales/actions-yarn@v5
        with:
          dir: backstage
          cmd: install

      - name: Build backend bundle
        uses: borales/actions-yarn@v5
        with:
          dir: backstage
          cmd: build:backend

      - name: Build the image
        uses: borales/actions-yarn@v5
        with:
          dir: backstage
          cmd: build-image --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backstage-unstable:${{vars.BACK_STACK_VERSION}}_${{ steps.tag.outputs.VERSION_TAG }} --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backstage-unstable:latest

      # Use docker push command directly to work with docker login action.
      - name: Push ${{ steps.tag.outputs.VERSION_TAG }} & latest
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backstage-unstable:${{vars.BACK_STACK_VERSION}}_${{ steps.tag.outputs.VERSION_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backstage-unstable:latest
