schemaType: Bundle
schemaVersion: 1.0.1
registry: "ghcr.io"
name: backstack-porter
description: "The BACK Stack HUB cluster installation"

dockerfile: template.Dockerfile

credentials:
  - name: github-token
    env: GITHUB_TOKEN
    description: Github token used to create PRs for clusters and applications from the BACK Stack HUB
    applyTo:
      - install
  - name: vault-token
    env: VAULT_TOKEN
    description: Vault default token, unless you know what you are doing, set it to root
    applyTo:
      - install
  - name: azure-credentials
    required: false
    env: AZURE_CREDENTIALS
    description: Azure credentials in JSON file format from -- az ad sp create-for-rbac
    path: /home/nonroot/.azure/credentials.json
    applyTo:
      - install
      - upgrade
      - uninstall
  - name: aws-credentials
    required: false
    env: AWS_CREDENTIALS
    description: AWS Credentials ~/.aws/credentials file set as [default] profile
    path: /home/nonroot/.aws/credentials
    applyTo:
      - install
      - upgrade
      - uninstall
  - name: gcp-credentials
    required: false
    env: GCP_CREDENTIALS
    description: GCP Credentials JSON file as generated by -- gcloud iam service-accounts keys create
    path: /home/nonroot/.gcloud/credentials.json
    applyTo:
      - install
      - upgrade
      - uninstall
  - name: gcp-credentials-project
    required: false
    description: Google Project ID
    env: ${GCP_CREDENTIALS_PROJECT}
    applyTo:
      - install
  - name: kubeconfig
    path: /home/nonroot/.kube/config
    description: Local Kubeconfig file to use for HUB installation. Skip if using KinD
    required: false
    applyTo:
      - install
      - upgrade
      - uninstall
  - name: backstage-google-auth-client-id
    required: false
    description: Google Auth IDP client id for SSO auth in Backstage
    env: ${BACKSTAGE_GOOGLE_AUTH_CLIENT_ID}
    applyTo:
      - install
  - name: backstage-google-auth-client-secret
    required: false
    description: Google Auth IDP secret for SSO auth in Backstage
    env: ${BACKSTAGE_GOOGLE_AUTH_CLIENT_SECRET}
    applyTo:
      - install
  - name: argocd-google-auth-client-id
    required: false
    description: Google Auth IDP client id for SSO auth in ArgoCD
    env: ${ARGOCD_GOOGLE_AUTH_CLIENT_ID}
    applyTo:
      - install
  - name: argocd-google-auth-client-secret
    required: false
    description: Google Auth IDP secret for SSO auth in ArgoCD
    env: ${ARGOCD_GOOGLE_AUTH_CLIENT_SECRET}
    applyTo:
      - install
  # Since these annotations can contain potentially sensitive information such as
  # Account numbers, certificate numbers, etc. It is better they are passed in as
  # a credential rather than as a parameter
  - name: custom-ingress-controller-annotations
    required: false
    description: If you would like to overwrite the default ingress-nginx annotations. Usually necessary when deploying to custom environments
    env: ${CUSTOM_INGRESS_CONTROLLER_ANNOTATIONS}
    path: ./manifests/ingress-nginx/values-${bundle.parameters.cluster-type}.yaml
    applyTo:
      - install
  - name: kyverno-hub-custom-policies-repository
    required: false
    description: Repository with custom HUB Kyverno policies to be installed
    env: ${KYVERNO_HUB_CUSTOM_POLICIES_REPOSITORY}
    applyTo:
      - install
  - name: kyverno-spoke-custom-policies-repository
    required: false
    description: Repository with custom SPOKE Kyverno policies to be installed
    env: ${KYVERNO_SPOKE_CUSTOM_POLICIES_REPOSITORY}
    applyTo:
      - install

parameters:
  - name: cluster-type
    env: CLUSTER_TYPE
    type: string
    default: kind
    enum:
      - kind
      - eks
      - aks
      - gke
      - xks
  - name: kyverno-hub-pss-level
    env: KYVERNO_HUB_PSS_LEVEL
    type: string
    default: restricted
    enum:
      - baseline
      - restricted
      - privileged
  - name: kyverno-hub-pss-audit-enforce
    env: KYVERNO_HUB_PSS_AUDIT_ENFORCE
    type: string
    default: Enforce
    enum:
      - Enforce
      - Audit
      - enforce
      - audit
  - name: repository
    env: REPOSITORY
    type: string
    default: https://github.com/nirmata/backstack-internal-requests
  - name: github-token-user
    env: GITHUB_TOKEN_USER
    type: string
    default: back-stack
  - name: registry
    env: REGISTRY
    type: string
    default: ghcr.io
  - name: backstage-host
    env: BACKSTAGE_HOST
    type: string
    default: backstage-7f000001.nip.io
  - name: argocd-host
    env: ARGOCD_HOST
    type: string
    default: argocd-7f000001.nip.io
  - name: vault-host
    env: VAULT_HOST
    type: string
    default: vault-7f000001.nip.io
  - name: argo-use-google-auth
    env: ARGO_USE_GOOGLE_AUTH
    type: string
    default: no_argo_auth
  - name: backstage-image-repository
    env: BACKSTAGE_IMAGE
    type: string
    default: nirmata/backstack-internal-backstage
  - name: backstage-image-tag
    env: BACKSTAGE_IMAGE_TAG
    type: string
    default: latest
  - name: crossplane-image-repository
    env: CROSSPLANE_IMAGE
    type: string
    default: nirmata/backstack-internal-crossplane
  - name: crossplane-image-tag
    env: CROSSPLANE_IMAGE_TAG
    type: string
    default: latest
  - name: backstage-use-google-auth
    env: BACKSTAGE_USE_GOOGLE_AUTH
    type: string
    default: no_backstage_auth
  - name: deploy-ingress-controller
    env: DEPLOY_INGRESS_CONTROLLER
    type: string
    default: no_ingress_controller

outputs:
  - name: kubeconfig
    type: file
    path: /home/nonroot/.kube/config
    applyTo:
      - install
  - name: kubeconfig-external
    type: file
    path: /home/nonroot/.kube/config-external
    applyTo:
      - install
  - name: ingress
    type: string
    applyTo:
      - install
  - name: argo-initial-passwd
    type: file
    path: /home/nonroot/argo_initial_passwd
    applyTo:
      - install

mixins:
  - exec
  - docker
  - helm3:
      clientVersion: v3.14.3 # TODO: need this to be macro
      repositories:
        crossplane-stable:
          url: https://charts.crossplane.io/stable
        ingress-nginx:
          url: https://kubernetes.github.io/ingress-nginx
        argocd:
          url: https://argoproj.github.io/argo-helm
        kyverno:
          url: https://kyverno.github.io/kyverno/
        jetstack:
          url: https://charts.jetstack.io
        backstage:
          url: https://backstage.github.io/charts
        hashi:
          url: https://helm.releases.hashicorp.com
  # BUG: there is a mixin bug with the helm plugin which has a hardcoded version of kubectl
  # need to install the kube mixin AFTER the helm3 one in order to leave the image with a semi
  # working kubectl. There is still a layer with kubectl of older persuasion in the image though
  - kubernetes:
      clientVersion: v1.29.1 # TODO: need this to be macro

install:
  # Kubernetes
  - exec:
      description: "Ensure Kubernetes Connection"
      command: ./helpers.sh
      arguments:
        - ensure_kubernetes
  # Kyverno
  - helm3:
      description: "Install Kyverno"
      name: kyverno
      namespace: kyverno
      chart: kyverno/kyverno
      atomic: true
      wait: true
  - helm3:
      description: "Install Kyverno PSS Restricted in Enforce Mode"
      name: kyverno-policies
      namespace: kyverno
      chart: kyverno/kyverno-policies
      atomic: true
      wait: true
      set:
        podSecurityStandard: ${bundle.parameters.kyverno-hub-pss-level}
        validationFailureAction: ${bundle.parameters.kyverno-hub-pss-audit-enforce}
        podSecuritySeverity: High
  - kubernetes:
      description: "Apply Kyverno Policy Exceptions for HUB Components"
      wait: true
      manifests:
        - ./manifests/system/kyverno-policy-exception.yaml
        - ./manifests/vault/kyverno-policy-exception.yaml
        - ./manifests/ingress-nginx/kyverno-policy-exception.yaml
        - ./manifests/crossplane/kyverno-policy-exception.yaml
  # cert-manager
  - helm3:
      description: "Install cert-manager"
      name: cert-manager
      namespace: cert-manager
      chart: jetstack/cert-manager
      atomic: true
      wait: true
      set:
        installCRDs: true
  - kubernetes:
      description: "Create cert-manager Self-Signed ClusterIssuer"
      wait: true
      manifests:
        - ./manifests/cert-manager/cert-manager-cluster-issuer.yaml
  # ingress-nginx
  - helm3:
      description: "Install ingress-nginx"
      name: ingress-nginx
      namespace: ingress-nginx
      chart: ingress-nginx/ingress-nginx
      atomic: true
      wait: true
      values:
        - ./manifests/ingress-nginx/values-${bundle.parameters.cluster-type}.yaml
      outputs:
        - name: ingress
          resourceType: service
          resourceName: ingress-nginx-controller
          namespace: ingress-nginx
          jsonPath: "{.status.loadBalancer.ingress}"
  # Crossplane
  - helm3:
      description: "Install Crossplane"
      name: crossplane
      namespace: crossplane-system
      chart: crossplane-stable/crossplane
      atomic: true
      wait: true
      set:
        args: "{--enable-external-secret-stores}"
  # Vault
  - helm3:
      description: "Install Vault"
      name: vault
      namespace: vault
      chart: hashi/vault
      atomic: true
      wait: true
      set:
        server.ingress.hosts[0].host: "${bundle.parameters.vault-host}"
        server.ingress.tls[0].hosts[0]: "${bundle.parameters.vault-host}"
        server.ingress.tls[0].secretName: vault-tls
      values:
        - ./manifests/vault/vault-values.yaml
  - kubernetes:
      description: "Create Vault Crossplane ESS Configmap"
      wait: true
      manifests:
        - ./manifests/vault/vault-ess-configmap.yaml
  # Crossplane: ESS Vault, Providers, ProviderConfigs
  - helm3:
      description: "Install Crossplane Vault ESS plugin"
      name: ess-plugin-vault
      namespace: crossplane-system
      chart: oci://xpkg.upbound.io/crossplane-contrib/ess-plugin-vault
      atomic: true
      wait: true
      values:
        - ./manifests/vault/vault-ess-plugin-values.yaml
  - kubernetes:
      description: "Create Vault Crossplane VaultConfig"
      wait: true
      manifests:
        - ./manifests/vault/vault-crossplane-vault.yaml
  - kubernetes:
      description: "Create Crossplane StoreConfig"
      wait: true
      manifests:
        - ./manifests/vault/vault-crossplane-store.yaml
  - kubernetes:
      description: "Create Crossplane RuntimeConfig"
      manifests:
        - ./manifests/crossplane/runtime-config.yaml
  - kubernetes:
      description: "Create Crossplane Providers"
      manifests:
        - ./manifests/crossplane/providers.yaml
  - exec:
      description: "Wait for Providers to become healthy"
      command: ./helpers.sh
      arguments:
        - validate_providers
  - exec:
      description: "envsubst"
      command: ./helpers.sh
      arguments:
        - do_envsubst_on_file
        - ./manifests/crossplane/provider-configs.yaml
  - kubernetes:
      description: "Configure Crossplane ProvidersConfig"
      manifests:
        - ./manifests/crossplane/envsub-provider-configs.yaml
  - kubernetes:
      description: "Install Crossplane BACK Stack CRD image"
      manifests:
        - ./manifests/crossplane/backstack.yaml
  - exec:
      description: "Create Crossplane Cloud Credential Secrets"
      command: ./helpers.sh
      arguments:
        - deploy_secrets
  # Backstage
  - helm3:
      description: "Install Backstage"
      name: backstage
      namespace: backstage
      chart: backstage/backstage
      atomic: true
      wait: true
      set:
        ingress.host: "${bundle.parameters.backstage-host}"
      values:
        - ./manifests/backstage/backstage-values.yaml
  - kubernetes:
      description: "Create Backstage app-config.yaml ConfigMap"
      wait: true
      manifests:
        - ./manifests/backstage/backstage-app-config.yaml
  - kubernetes:
      description: "Create Backstage ClusterRole"
      wait: true
      manifests:
        - ./manifests/backstage/backstage-clusterrole.yaml
  - kubernetes:
      description: "Create Backstage ClusterRoleBinding"
      wait: true
      manifests:
        - ./manifests/backstage/backstage-clusterrole-binding.yaml
  # ArgoCD
  - helm3:
      description: "Install ArgoCD"
      name: argocd
      namespace: argocd
      chart: argocd/argo-cd
      atomic: true
      wait: true
      set:
        server.ingress.hosts[0]: "${bundle.parameters.argocd-host}"
        server.ingressGrpc.hosts[0]: "${bundle.parameters.argocd-host}"
        configs.cm.url: "https://${bundle.parameters.argocd-host}"
      values:
        - ./manifests/argocd/argocd-values.yaml
  - kubernetes:
      description: "Create ArgoCD App-of-Apps"
      wait: true
      manifests:
        - ./manifests/argocd/argocd-app-of-apps.yaml
  - kubernetes:
      description: "Create ArgoCD App-of-Clusters"
      wait: true
      manifests:
        - ./manifests/argocd/argocd-app-clusters.yaml
  - kubernetes:
      description: "Create ArgoCD HUB Secret"
      wait: true
      manifests:
        - ./manifests/argocd/argocd-hub-secret.yaml
  - kubernetes:
      description: "Create ArgoCD AppSet Kyverno"
      wait: true
      manifests:
        - ./manifests/argocd/argocd-appset-kyverno.yaml
  - kubernetes:
      description: "Create ArgoCD AppSet Kyverno PSS Restricted"
      wait: true
      manifests:
        - ./manifests/argocd/argocd-appset-kyverno-pss.yaml
  # TODO: step argo-kyverno-custom-policies
  # TODO: step kyverno-custom-policies

  # Post install validations
  - exec:
      description: "Validate BACK Stack Configuration & Providers"
      command: ./helpers.sh
      arguments:
        - validate_back_stack_configuration
  - exec:
      description: "Restart Crossplane ESS Vault Plugin"
      command: ./helpers.sh
      arguments:
        - restart_pod
        - crossplane-system
        - ess-plugin-vault
  - exec:
      description: "Grab ArgoCD Initial Password"
      command: ./helpers.sh
      arguments:
        - return_argo_initial_pass

upgrade:
  - exec:
      description: "Not implemented at this time"
      command: ./helpers.sh
      arguments:
        - upgrade

uninstall:
  # TODO: Need to add a cleanup step for all the SPOKE resources? or point to documents that
  # explain what the expected process is
  - exec:
      description: "Check if installed on KinD and Uninstall BACK Stack"
      command: ./helpers.sh
      arguments:
        - uninstall
  - helm3:
      description: "Uninstall ArgoCD"
      namespace: argocd
      wait: true
      noHooks: true
      releases:
        - argocd
  - helm3:
      description: "Uninstall Backstage"
      namespace: backstage
      wait: true
      noHooks: true
      releases:
        - backstage
  - helm3:
      description: "Uninstall Crossplane"
      namespace: crossplane-system
      wait: true
      noHooks: true
      releases:
        - ess-plugin-vault
        - crossplane
  - helm3:
      description: "Uninstall Vault"
      namespace: vault
      wait: true
      noHooks: true
      releases:
        - vault
  - helm3:
      description: "Uninstall ingress-nginx"
      namespace: ingress-nginx
      wait: true
      noHooks: true
      releases:
        - ingress-nginx
  - helm3:
      description: "Uninstall cert-manager"
      namespace: cert-manager
      wait: true
      noHooks: true
      releases:
        - cert-manager
  - helm3:
      description: "Uninstall Kyverno & Kyverno PSS"
      namespace: kyverno
      wait: true
      noHooks: true
      releases:
        - kyverno-policies
        - kyverno
